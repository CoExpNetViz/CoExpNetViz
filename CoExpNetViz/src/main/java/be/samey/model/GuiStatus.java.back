package be.samey.model;

/*
 * #%L
 * CoExpNetViz
 * %%
 * Copyright (C) 2015 PSB/UGent
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 * 
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-3.0.html>.
 * #L%
 */

import be.samey.gui.InpPnl;
import be.samey.gui.SpeciesEntry;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import javax.swing.JFrame;
import javax.swing.JPanel;

/**
 *
 * @author sam
 */
public class GuiStatus extends Observable {

    private final Model model;
    private final JFrame rootPanelFrame;
    private final InpPnl rootPanel;

    private boolean inpBaitSelected;
    private boolean saveFileSelected;
    private final double defaultNegCutoff = -0.6;
    private final double defaultPosCutoff = 0.8;

    private final List<SpeciesEntry> speciesList = new ArrayList<SpeciesEntry>();

    public GuiStatus(Model model){
        this.model = model;
        rootPanel = new InpPnl(model);
        rootPanelFrame = new JFrame("Co-expression Network Visualization Tool");

        rootPanelFrame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        rootPanelFrame.setContentPane(rootPanel);

        this.addObserver(rootPanel);
        setChanged();
        notifyObservers();
    }
    
    public JFrame getRootPanelFrame() {
        return rootPanelFrame;
    }

    public JPanel getRootPanel() {
        return rootPanel;
    }

    public void setInpBaitSelected(boolean inpBaitSelected) {
        //TODO: only do this part if there was actually a change
        this.inpBaitSelected = inpBaitSelected;
        setChanged();
        notifyObservers();
    }

    public boolean isInpBaitSelected() {
        return inpBaitSelected;
    }

    public void setSaveFileSelected(boolean saveFileSelected) {
        //TODO: only do this part if there was actually a change
        this.saveFileSelected = saveFileSelected;
        setChanged();
        notifyObservers();
    }

    public boolean isSaveFileSelected() {
        return saveFileSelected;
    }

    public void addSpecies(SpeciesEntry se) {
        //only do something if list changed
        if (speciesList.add(se)) {
            setChanged();
            notifyObservers();
        }
    }

    public void removeSpecies(SpeciesEntry se) {
        //only do something if list changed
        if (speciesList.remove(se)) {
            setChanged();
            notifyObservers();
        }
    }

    public void removeAllSpecies() {
        //only do something if list changed
        if (speciesList.removeAll(speciesList)) {
            setChanged();
            notifyObservers();
        }
    }

    public List<SpeciesEntry> getSpeciesList() {
        return speciesList;
    }

    public double getDefaultNegCutoff() {
        return defaultNegCutoff;
    }

    public double getDefaultPosCutoff() {
        return defaultPosCutoff;
    }

}
